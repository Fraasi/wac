#!/usr/bin/env bash
# shellcheck source=/dev/null disable=
#
# script for querying wolfram-alpha api from command line
#

version="1.1.0"
update_url="https://raw.githubusercontent.com/Fraasi/wac/main/wac"

# if WOLFRAM_APP_ID is empty & ~/.config/wac/config is readable
if [[ -z "$WOLFRAM_APP_ID" && -r "$HOME"/.config/wac/config ]]; then
  source "$HOME"/.config/wac/config
fi

# check for dependencies
dependencies=('curl' 'jq')
for dep in "${dependencies[@]}"; do
  if ! command -v "$dep" >/dev/null 2>&1; then
    printf "%s has a dependency of %s which was not found in path\nexiting..." "$(basename "$0")" "$dep"
    exit 1
  fi
done

# check if running in wsl for start program
if command -v wsl.exe >/dev/null 2>&1; then
  start="explorer.exe"
else
  start="xdg-open"
fi

function usage() {
  printf "
Usage:
  %s [options] <your query>

  Options:
  -d    debug (with -f, dump json to result.json)
  -f    full query mode (default)
  -h    show this help
  -s    spoken mode
  -t    show tips on how to use
  -U    update wac
  -r    result mode
  -v    show version
  -w    query the web interface
  " "$(basename "$0")"
}

function tips() {
    printf "
Try the following:
  Use different phrasing or notations
  Enter whole words instead of abbreviations
  Avoid mixing mathematical and other notations
  Check your spelling
  Give your input in English

  Other tips for using Wolfram|Alpha
  Wolfram|Alpha answers specific questions rather than explaining general topics
  (e.g. Enter '2 cups of sugar', not 'nutrition information')
  You can only get answers about objective facts
  (e.g. Try 'highest mountain', not 'most beautiful painting')
  Only what is known is known to Wolfram|Alpha
  (e.g. Ask 'how many men in Mauritania', not 'how many monsters in Loch Ness')
  Only public information is available
  (e.g. Request 'GDP of France', not 'home phone of Michael Jordan')
"
}

function main() {

  local app_id="$WOLFRAM_APP_ID"
  local mode="query"
  local base_url="https://api.wolframalpha.com/v2"
  local debug=false

  while getopts "dfhstUrvw" OPTNAME; do
    case "$OPTNAME" in
    d)
      debug=true
      ;;
    f)
      mode="query"
      ;;
    h)
      usage
      exit 0
      ;;
    s)
      mode="spoken"
      ;;
    t)
      tips
      exit 0
      ;;
    U)
      curl -s "$update_url" -o /tmp/wac
      local github_version=$(grep -m 1 version /tmp/wac | cut -d'=' -f2 | sed 's/"//g')
      printf "your current version is %s\nversion on github is %s\n" "$version" "$github_version"
      read -p "Do you wish to update? [Yn]" yn
        yn=${yn:-y}
        case $yn in
          [Nn]* )
            exit 0
            ;;
          [Yy]* )
            cp -v /tmp/wac $(which wac)
            exit 0
            ;;
        esac
      ;;
    r)
      mode="result"
      ;;
    v)
      printf "v%s" "$version"
      exit 0
      ;;
    w)
      shift
      "$start" "https://www.wolframalpha.com/input?i=$*"
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  local result
  result=$(curl --silent \
    --data "output=json" \
    --data "reinterpret=true" \
    --data "appid=$app_id" \
    --data-urlencode "input=$*" \
    "$base_url/$mode")

  if [[ "$debug" == true ]]; then
    printf "%s" "$result" >result.json
  fi

  # query == json, all else just text
  if [[ "$mode" != "query" ]]; then
    printf "%s" "$result"
  else
    jq --raw-output '

def colors:
    {
        "underline": "\u001b[4m",
        "bold": "\u001b[1m",
        "reset": "\u001b[0m",
   };

if .[].success == false then
        if (.[] | has("error")) and (.[].error | type != "boolean") then
          "Error:",
          "  code: " + (.[].error.code | tostring),
          "  msg:  " + (.[].error.msg | tostring),
          halt_error(1)
        else
          "Wolfram|Alpha did not understand your input",
          .[].tips.text // "use -t option to get tips on how to use"
        end,
        if .[] | has("didyoumeans") then
            "inputstring:", "  " + (.[].inputstring | tostring),
            "didyoumeans:", "  " + (.[].didyoumeans[].val | tostring)
        else empty
        end
else
    .[].pods[] | (
            if .subpods[].plaintext == "" then
                empty
            else
                "\(colors.bold)" + .title + ":\(colors.reset)",
                "  " + .subpods[].plaintext
            end
            , ""
        )
end

' <<< "$result"
  fi

}

main "$@"
